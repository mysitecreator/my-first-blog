from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
import config
import random
from bs4 import BeautifulSoup as bs
import requests

from newmanga import *

logging.basicConfig(level=logging.INFO)

bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)

btnMain = KeyboardButton('Главное меню')

btnRandom = KeyboardButton('Рандомный яой')
# btnDesc = KeyboardButton('Описание')
mainMenu = ReplyKeyboardMarkup(resize_keyboard=True).add(btnRandom)


# @dp.message_handler(commands=['subscribe'])
# async def subscribe(message: types.Message):
#     if (not db.subscriber_exists(message.from_user.id)):
#         # если юзера нет в базе, добавляем его
#         db.add_subscriber(message.from_user.id)
#     else:
#         # если он уже есть, то просто обновляем ему статус подписки
#         db.update_subscription(message.from_user.id, True)
#
#     await message.answer(
#         "Вы успешно подписались на рассылку!\nЖдите, скоро выйдут новые обзоры и вы узнаете о них первыми =)")
#
#
# # Команда отписки
# @dp.message_handler(commands=['unsubscribe'])
# async def unsubscribe(message: types.Message):
#     if (not db.subscriber_exists(message.from_user.id)):
#         # если юзера нет в базе, добавляем его с неактивной подпиской (запоминаем)
#         db.add_subscriber(message.from_user.id, False)
#         await message.answer("Вы итак не подписаны.")
#     else:
#         # если он уже есть, то просто обновляем ему статус подписки
#         db.update_subscription(message.from_user.id, False)
#         await message.answer("Вы успешно отписаны от рассылки.")


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await bot.send_message(message.from_user.id, 'Привет {0.first_name}'.format(message.from_user),
                           reply_markup=mainMenu)

    test = await get_random_anime()
    print(test)
    print(message.from_user)


@dp.message_handler()
async def bot_message(message: types.Message):
    test = await get_random_anime()

    url_rate = test['link']
    req_rate = requests.get(url_rate)
    soup_rate = bs(req_rate.content, features='html.parser')

    rate = soup_rate.find('div', class_='media-rating__value').text.strip()
    votes = soup_rate.find('div', class_='media-rating__votes').text.strip()

    linktocomm = f"{test['link']}?section=comments"
    startread = f"{test['link']}/v1/c1?page=1"

    keyboard = types.InlineKeyboardMarkup()
    row_btn1 = [
        types.InlineKeyboardButton("Инфо", url=test['link']),
        types.InlineKeyboardButton('К комментариям', url=linktocomm)
    ]
    row_btn2 = [
        types.InlineKeyboardButton('Начать читать', url=startread)
    ]
    keyboard.row(*row_btn1)
    keyboard.row(*row_btn2)

    desc_url = test['link']
    req_desc = requests.get(desc_url)
    soup_desc = bs(req_desc.content, features='html.parser')

    desc = soup_desc.find('div', class_='media-description__text').text.strip()

    if message.text == 'Рандомный яой':
        await bot.send_photo(message.from_user.id, types.InputFile.from_url(test['image']),
                             f"Название:  *{test['title']}*\n"
                             f"\nОписание:  {desc}\n\nОценка: ★{rate}  `{votes}`", parse_mode="Markdown",
                             reply_markup=keyboard)

    print(message.from_user, message.chat, message.text)
    print(message.text)


# @dp.message_handler(commands=['help'])
# async def process_help_command(message: types.Message):
# #     await message.reply("Напиши мне что-нибудь, и я отпрпавлю этот текст тебе в ответ!")
# #
# # @dp.message_handler()
# # async def echo_message(msg: types.Message):
#     await bot.send_message(msg.from_user.id, msg.text)


executor.start_polling(dp, skip_updates=True)





import requests
from bs4 import BeautifulSoup as bs
from urllib.parse import urlparse
import random

async def get_random_anime():
    base_url = 'http://yaoilib.me'
    url = 'https://yaoilib.me/manga-list?types[]=1'
    r = requests.get(url)

    soup = bs(r.content, features='html.parser')

    anime = soup.find_all('a', class_='media-card')
    manga_list = []

    for mangas in anime:
        manga = {}
        # print(f"{title} | {link}")
        manga['image'] = base_url + mangas["data-src"]
        manga['title'] = mangas.find("h3", class_="media-card__title").text.strip()
        manga['link'] = mangas['href']

        manga_list.append(manga)

    send_manga = random.choice(manga_list)

    return send_manga


# def get_random_manga():
#     base_url = 'http://mangalib.me'
#     url = 'https://mangalib.me/manga-list?sort=rate&dir=desc&page=1&types[]=1'
#     r = requests.get(url)
#
#     headers = {
#         "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) "
#         "Chrome/103.0.0.0 Safari/537.36 "
#     }
#
#     soup = bs(r.content, 'html.parser', headers=headers)
#     print(soup.text)
#     anime = soup.find_all('a', class_='media-card')
#     manga_list = []
#
#     for mangas in anime:
#         manga = {'image': base_url + mangas["data-src"],
#                  'title': mangas.find("h3", class_="media-card__title").text.strip(),
#                  'link': mangas['href']}
#
#         manga_list.append(manga)
#
#     send_manga = random.choice(manga_list)
#
#     return send_manga
